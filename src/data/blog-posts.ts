export interface BlogPost {
  id: number;
  title: string;
  description: string;
  date: string;
  tags: string[];
  content: string;
}

export const blogPosts: BlogPost[] = [
  {
    id: 1,
    title: "Next.js 13 新特性详解",
    description: "探索 Next.js 13 带来的革命性更新，包括 App Router、Server Components 等新特性。",
    date: "2024-03-15",
    tags: ["Next.js", "React", "Web开发"],
    content: `# Next.js 13 新特性详解

## 引言
Next.js 13 带来了许多激动人心的新特性，本文将深入探讨这些更新。

## 主要更新

### 1. App Router
- 基于文件系统的路由
- 支持嵌套布局
- 简化的数据获取

### 2. Server Components
- 默认服务器端渲染
- 减少客户端 JavaScript
- 提升性能

### 3. 其他改进
- 改进的图片组件
- 优化的字体系统
- 更好的开发体验

## 总结
Next.js 13 的这些更新为开发者提供了更强大的工具和更好的性能。`
  },
  {
    id: 2,
    title: "TypeScript 高级类型实战",
    description: "深入理解 TypeScript 的高级类型系统，掌握类型编程的精髓。",
    date: "2024-03-10",
    tags: ["TypeScript", "编程", "类型系统"],
    content: `# TypeScript 高级类型实战

## 引言
TypeScript 的类型系统非常强大，本文将介绍一些高级类型的使用技巧。

## 核心概念

### 1. 条件类型
- 类型推断
- 分布式条件类型
- 类型守卫

### 2. 映射类型
- 属性映射
- 类型转换
- 实用工具类型

### 3. 类型编程
- 类型递归
- 类型约束
- 类型推导

## 实践应用

1. 类型安全
2. 代码提示
3. 重构支持

## 总结
掌握 TypeScript 高级类型可以显著提升代码质量和开发效率。`
  },
  {
    id: 3,
    title: "现代前端工程化实践",
    description: "探讨现代前端工程化的最佳实践，包括构建工具、自动化测试和部署策略。",
    date: "2024-03-05",
    tags: ["工程化", "前端", "DevOps"],
    content: `# 现代前端工程化实践

## 引言
前端工程化是提升开发效率和项目质量的关键，本文将分享一些实践经验。

## 核心内容

### 1. 构建工具
- Vite
- Webpack
- Rollup

### 2. 自动化测试
- 单元测试
- 集成测试
- E2E测试

### 3. 部署策略
- CI/CD
- 容器化
- 监控告警

## 最佳实践

1. 项目结构
2. 代码规范
3. 性能优化

## 总结
良好的工程化实践是项目成功的重要保障。`
  },
  {
    id: 4,
    title: "深入理解 React 状态管理",
    description: "探索 React 应用中的状态管理方案，从 Context 到 Redux 的全面解析。",
    date: "2024-03-01",
    tags: ["React", "状态管理", "前端"],
    content: `# 深入理解 React 状态管理

## 引言
状态管理是 React 应用开发中的关键问题，本文将深入探讨各种解决方案。

## 状态管理方案

### 1. 内置方案
- useState
- useReducer
- Context API

### 2. 第三方库
- Redux
- MobX
- Zustand

### 3. 状态管理最佳实践
- 状态设计
- 性能优化
- 代码组织

## 实践建议

1. 选择合适的方案
2. 遵循最佳实践
3. 注意性能影响

## 总结
合理使用状态管理工具可以显著提升应用的可维护性。`
  },
  {
    id: 5,
    title: "Web 性能优化指南",
    description: "全面的 Web 性能优化策略，从加载速度到运行时性能的优化方案。",
    date: "2024-02-25",
    tags: ["性能优化", "Web开发", "最佳实践"],
    content: `# Web 性能优化指南

## 引言
性能优化是提升用户体验的关键，本文将分享一系列实用的优化策略。

## 优化方向

### 1. 加载性能
- 资源压缩
- 懒加载
- 预加载

### 2. 运行时性能
- 代码分割
- 缓存策略
- 渲染优化

### 3. 监控与分析
- 性能指标
- 监控工具
- 优化方案

## 实践步骤

1. 性能评估
2. 优化实施
3. 效果验证

## 总结
持续的性能优化是提升用户体验的重要保障。`
  },
  {
    id: 6,
    title: "CSS 新特性详解",
    description: "探索现代 CSS 的新特性，包括 Grid、Flexbox、CSS 变量等。",
    date: "2024-02-20",
    tags: ["CSS", "前端", "Web开发"],
    content: `# CSS 新特性详解

## 引言
现代 CSS 提供了更多强大的特性，本文将介绍一些实用的新功能。

## 核心特性

### 1. 布局系统
- Grid 布局
- Flexbox
- 多列布局

### 2. 新特性
- CSS 变量
- 容器查询
- 新的选择器

### 3. 动画与过渡
- 动画
- 变换
- 过渡效果

## 实践应用

1. 响应式设计
2. 动画效果
3. 主题定制

## 总结
合理使用 CSS 新特性可以创建更优秀的用户界面。`
  },
  {
    id: 7,
    title: "前端性能优化实战指南",
    description: "深入探讨前端性能优化的关键策略和实践方法，从加载速度到运行时性能的全面优化方案。",
    date: "2024-03-25",
    tags: ["性能优化", "前端", "最佳实践"],
    content: `# 前端性能优化实战指南

## 引言
在当今快节奏的互联网时代，网站性能直接影响用户体验和业务转化率。本文将分享一系列实用的前端性能优化策略。

## 核心优化方向

### 1. 资源加载优化
- 图片懒加载和预加载
- 资源压缩和合并
- CDN 加速
- 缓存策略优化

### 2. 代码层面优化
- 代码分割
- Tree Shaking
- 按需加载
- 防抖和节流

### 3. 渲染性能优化
- 虚拟列表
- 避免重排重绘
- 使用 CSS 硬件加速
- 优化动画性能

## 实践步骤

1. 使用性能分析工具
   - Lighthouse
   - Chrome DevTools
   - WebPageTest

2. 实施优化方案
   - 配置构建工具
   - 优化资源加载
   - 改进代码结构

3. 监控和持续优化
   - 性能指标监控
   - 用户行为分析
   - A/B 测试

## 总结
性能优化是一个持续的过程，需要结合具体业务场景，采用合适的优化策略，并持续监控和调整。`
  },
  {
    id: 8,
    title: "React Hooks 最佳实践与性能优化",
    description: "深入解析 React Hooks 的使用技巧和性能优化方法，帮助你写出更高质量的 React 代码。",
    date: "2024-03-23",
    tags: ["React", "Hooks", "性能优化"],
    content: `# React Hooks 最佳实践与性能优化

## 引言
React Hooks 的引入改变了我们编写 React 组件的方式，本文将分享一些实用的 Hooks 使用技巧和性能优化方法。

## 核心概念

### 1. 常用 Hooks 详解
- useState 状态管理
- useEffect 副作用处理
- useCallback 和 useMemo
- useRef 引用管理

### 2. 自定义 Hooks
- 逻辑复用
- 关注点分离
- 状态管理
- 副作用封装

### 3. 性能优化策略
- 依赖项优化
- 避免不必要的渲染
- 合理使用 useMemo
- 优化 useEffect

## 实践步骤

1. 组件设计
   - 合理拆分组件
   - 状态提升
   - 属性传递优化

2. 性能优化
   - 使用 React.memo
   - 优化依赖项
   - 避免闭包陷阱

3. 代码质量
   - 遵循 Hooks 规则
   - 编写测试用例
   - 代码审查

## 总结
合理使用 React Hooks 可以显著提升代码质量和开发效率，但需要注意性能优化和最佳实践。`
  },
  {
    id: 9,
    title: "现代 CSS 技术实践指南",
    description: "探索现代 CSS 技术，包括 Grid、Flexbox、CSS 变量等，帮助你构建更灵活、响应式的用户界面。",
    date: "2024-03-20",
    tags: ["CSS", "前端", "响应式设计"],
    content: `# 现代 CSS 技术实践指南

## 引言
现代 CSS 技术为我们提供了更强大的布局和样式控制能力，本文将介绍一些实用的 CSS 技术和最佳实践。

## 核心技术

### 1. 布局技术
- CSS Grid 网格布局
- Flexbox 弹性布局
- 多列布局
- 响应式设计

### 2. 现代特性
- CSS 变量
- CSS 计算函数
- 容器查询
- 新的选择器

### 3. 动画和过渡
- CSS 动画
- 过渡效果
- 变换
- 性能优化

## 实践步骤

1. 布局实现
   - 使用 Grid 创建复杂布局
   - Flexbox 实现弹性布局
   - 响应式设计适配

2. 样式优化
   - 使用 CSS 变量
   - 模块化 CSS
   - 性能考虑

3. 动画效果
   - 添加过渡效果
   - 实现动画
   - 优化性能

## 总结
现代 CSS 技术为我们提供了更多可能性，合理使用这些技术可以创建出更优秀的用户界面。`
  }
]; 